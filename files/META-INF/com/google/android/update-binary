#!/sbin/sh

# Based on osm0sis's shell installer script with bits from Chainfire's SuperSU shell installer script

# This file contains parts from the scripts taken from the TK GApps Project by TKruzze and osmOsis.
# This file contains parts from the scripts taken from the Open GApps Project by mfonville.
# This file contains parts from the update-binary taken from the SuperSU installation zip.
#
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# These scripts are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

outfd=$2
ui_print() {
  echo "ui_print $1" > /proc/self/fd/$outfd
  echo "ui_print" > /proc/self/fd/$outfd
}

ui_print "*************************"
ui_print "AU01 GApps 6.X.X"
ui_print "*************************"

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, 1> /dev/null 2>&1
  else
    cat /proc/mounts | grep $1 1> /dev/null 2>&1
  fi
  return $?
}
toolbox_mount() {
  RW=rw
  if [ ! -z "$2" ]; then
    RW=$2
  fi

  DEV=
  POINT=
  FS=
  for i in `cat /etc/fstab | grep "$1"`; do
    if [ -z "$DEV" ]; then
      DEV=$i
    elif [ -z "$POINT" ]; then
      POINT=$i
    elif [ -z "$FS" ]; then
      FS=$i
      break
    fi
  done
  if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT; fi
  if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT; fi

  DEV=
  POINT=
  FS=
  for i in `cat /etc/recovery.fstab | grep "$1"`; do
    if [ -z "$POINT" ]; then
      POINT=$i
    elif [ -z "$FS" ]; then
      FS=$i
    elif [ -z "$DEV" ]; then
      DEV=$i
      break
    fi
  done
  if [ "$FS" = "emmc" ]; then
    if (! is_mounted $1 $RW); then mount -t ext4 -o $RW $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t ext4 -o $RW,remount $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t f2fs -o $RW $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t f2fs -o $RW,remount $DEV $POINT; fi
  else
    if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT; fi
  fi
}

ui_print "Mounting /system..."
toolbox_mount /system

file_getprop() { grep "^$2" "$1" | cut -d= -f2; }

rom_build_prop=/system/build.prop

system_sdk=$(file_getprop $rom_build_prop "ro.build.version.sdk")
gapps_sdk=23

ui_print "Checking if GApps are compatible with your system..."
ui_print "You need an SDK version of $gapps_sdk to proceed..."
if [ "$system_sdk" -eq "$gapps_sdk" ]; then
  ui_print "Your SDK version is $system_sdk, GApps are compatible..."
  ui_print "Continuing install..."
else
  ui_print "Your SDK version is $system_sdk, GApps are not compatible..."
  ui_print "Aborting install..."
  umount /system
  exit 1
fi

ui_print "Removing conflicting apks..."
rm -rf "/data/dalvik-cache" "/system/app/CalendarGooglePrebuilt" "/system/app/Camera2" "/system/app/ConfigUpdater" "/system/app/DeskClock" "/system/app/FaceLock" "/system/app/GoogleCalendarSyncAdapter" "/system/app/GoogleContactsSyncAdapter" "/system/app/GoogleHome" "/system/app/GoogleTTS" "/system/app/PrebuiltExchange3Google" "/system/app/PrebuiltGmail" "/system/app/Apollo" "/system/app/Browser" "/system/app/BrowserProviderProxy" "/system/app/Calendar" "/system/app/CMFileManager" "/system/app/CMWallpapers" "/system/app/Eleven" "/system/app/Email" "/system/app/Gallery2" "/system/app/Galaxy4" "/system/app/Gello" "/system/app/HoloSpiralWallpaper" "/system/app/LatinIME" "/system/app/messaging" "/system/app/NoiseField" "/system/app/OpenWnn" "/system/app/PartnerBookmarksProvider" "/system/app/PhaseBeam" "/system/app/PhotoPhase" "/system/app/PhotoTable" "/system/app/PicoTts" "/system/app/Provision" "/system/app/QuickSearchBox" "/system/app/Snap" "/system/app/Terminal" "/system/app/VisualizationWallpapers" "/system/media/bootanimation.zip" "/system/priv-app/BrowserProviderProxy" "/system/priv-app/CMUpdater" "/system/priv-app/PartnerBookmarksProvider" "/system/priv-app/Provision" "/system/priv-app/QuickSearchBox" "/system/priv-app/Trebuchet" "/system/etc/permissions/com.google.android.maps.xml" "/system/etc/permissions/com.google.android.media.effects.xml" "/system/etc/permissions/com.google.widevine.software.drm.xml" "/system/etc/permissions/features.xml" "/system/etc/preferred-apps/google.xml" "/system/framework/com.google.android.maps.jar" "/system/framework/com.google.android.media.effects.jar" "/system/framework/com.google.widevine.software.drm.jar" "/system/lib/libfilterpack_facedetect.so" "/system/lib/libjni_latinime.so" "/system/priv-app/GoogleBackupTransport" "/system/priv-app/GoogleFeedback" "/system/priv-app/GoogleLoginService" "/system/priv-app/GoogleOneTimeInitializer" "/system/priv-app/GooglePartnerSetup" "/system/priv-app/GoogleServicesFramework" "/system/priv-app/Phonesky" "/system/priv-app/PrebuiltGmsCore" "/system/priv-app/SetupWizard" "/system/priv-app/Velvet" "/system/usr/srec/en-US/c_fst" "/system/usr/srec/en-US/clg" "/system/usr/srec/en-US/commands.abnf" "/system/usr/srec/en-US/compile_grammar.config" "/system/usr/srec/en-US/contacts.abnf" "/system/usr/srec/en-US/dict" "/system/usr/srec/en-US/dictation.config" "/system/usr/srec/en-US/dnn" "/system/usr/srec/en-US/endpointer_dictation.config" "/system/usr/srec/en-US/endpointer_voicesearch.config" "/system/usr/srec/en-US/ep_acoustic_model" "/system/usr/srec/en-US/g2p_fst" "/system/usr/srec/en-US/grammar.config" "/system/usr/srec/en-US/hclg_shotword" "/system/usr/srec/en-US/hmm_symbols" "/system/usr/srec/en-US/hmmlist" "/system/usr/srec/en-US/hotword.config" "/system/usr/srec/en-US/hotword_classifier" "/system/usr/srec/en-US/hotword_normalizer" "/system/usr/srec/en-US/hotword_prompt.txt" "/system/usr/srec/en-US/hotword_word_symbols" "/system/usr/srec/en-US/metadata" "/system/usr/srec/en-US/norm_fst" "/system/usr/srec/en-US/normalizer" "/system/usr/srec/en-US/offensive_word_normalizer" "/system/usr/srec/en-US/phone_state_map" "/system/usr/srec/en-US/phonelist" "/system/usr/srec/en-US/rescoring_lm" "/system/usr/srec/en-US/wordlist" "/system/vendor/pittpatt/models/detection/multi_pose_face_landmark_detectors.8/landmark_group_meta_data.bin" "/system/vendor/pittpatt/models/detection/multi_pose_face_landmark_detectors.8/left_eye-y0-yi45-p0-pi45-r0-ri20.lg_32-tree7-wmd.bin" "/system/vendor/pittpatt/models/detection/multi_pose_face_landmark_detectors.8/nose_base-y0-yi45-p0-pi45-r0-ri20.lg_32-tree7-wmd.bin" "/system/vendor/pittpatt/models/detection/multi_pose_face_landmark_detectors.8/right_eye-y0-yi45-p0-pi45-r0-ri20.lg_32-3-tree7-wmd.bin" "/system/vendor/pittpatt/models/detection/yaw_roll_face_detectors.7.1/head-y0-yi45-p0-pi45-r0-ri30.4a-v24-tree7-2-wmd.bin" "/system/vendor/pittpatt/models/detection/yaw_roll_face_detectors.7.1/head-y0-yi45-p0-pi45-rn30-ri30.5-v24-tree7-2-wmd.bin" "/system/vendor/pittpatt/models/detection/yaw_roll_face_detectors.7.1/head-y0-yi45-p0-pi45-rp30-ri30.5-v24-tree7-2-wmd.bin" "/system/vendor/pittpatt/models/detection/yaw_roll_face_detectors.7.1/pose-r.8.1.bin" "/system/vendor/pittpatt/models/detection/yaw_roll_face_detectors.7.1/pose-y-r.8.1.bin" "/system/vendor/pittpatt/models/recognition/face.face.y0-y0-71-N-tree_7-wmd.bin"

zipfile=$3

set_perm() {
  uid=$1; gid=$2; mod=$3;
  shift 3;
  chown $uid.$gid $*; chown $uid:$gid $*;
  chmod $mod $*;
}

ui_print "Installing Dynamic GApps..."
unzip -o "$zipfile" "system/*" -d /
unzip -o "$zipfile" "facelock/*" -d /tmp
set_perm 0 0 0777 /tmp/facelock/facelock.sh
/tmp/facelock/facelock.sh
unzip -o "$zipfile" "googlehome/*" -d /tmp
set_perm 0 0 0777 /tmp/googlehome/googlehome.sh
/tmp/googlehome/googlehome.sh
unzip -o "$zipfile" "googletts/*" -d /tmp
set_perm 0 0 0777 /tmp/googletts/googletts.sh
/tmp/googletts/googletts.sh
unzip -o "$zipfile" "latinimegoogle/*" -d /tmp
set_perm 0 0 0777 /tmp/latinimegoogle/latinimegoogle.sh
/tmp/latinimegoogle/latinimegoogle.sh
unzip -o "$zipfile" "libs/*" -d /tmp
set_perm 0 0 0777 /tmp/libs/libs.sh
/tmp/libs/libs.sh
unzip -o "$zipfile" "prebuiltbugle/*" -d /tmp
set_perm 0 0 0777 /tmp/prebuiltbugle/prebuiltbugle.sh
/tmp/prebuiltbugle/prebuiltbugle.sh
unzip -o "$zipfile" "prebuiltgmscore/*" -d /tmp
set_perm 0 0 0777 /tmp/prebuiltgmscore/prebuiltgmscore.sh
/tmp/prebuiltgmscore/prebuiltgmscore.sh
unzip -o "$zipfile" "setupwizard/*" -d /tmp
set_perm 0 0 0777 /tmp/setupwizard/setupwizard.sh
/tmp/setupwizard/setupwizard.sh
unzip -o "$zipfile" "velvet/*" -d /tmp
set_perm 0 0 0777 /tmp/velvet/velvet.sh
/tmp/velvet/velvet.sh

set_perm_recursive() {
  uid=$1; gid=$2; dmod=$3; fmod=$4;
  shift 4;
  until [ ! "$1" ]; do
    chown -R $uid.$gid $1; chown -R $uid:$gid $1;
    find "$1" -type d -exec chmod $dmod {} +;
    find "$1" -type f -exec chmod $fmod {} +;
    shift;
  done;
}

ui_print "Setting permissions..."
# Change pittpatt folders to root:shell per Google Factory Settings
find "/system/vendor/pittpatt" -type d -exec chown 0.2000 '{}' \;
set_perm_recursive 0 0 755 644 "/system/app" "/system/etc/permissions" "/system/etc/preferred-apps" "/system/etc/sysconfig" "system/etc/updatecmds" "/system/framework" "/system/lib" "/system/lib64" "/system/priv-app" "/system/usr/srec" "/system/vendor/lib" "/system/vendor/lib64" "/system/vendor/pittpatt"


ui_print "Unmounting /system..."
umount /system

ui_print "Installation complete!"
